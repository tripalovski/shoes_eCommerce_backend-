// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eCommerce_backend.Database;

#nullable disable

namespace eCommerce_backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250905183954_RemoveRefreshToken")]
    partial class RemoveRefreshToken
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eCommerce_backend.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Country = "USA",
                            Description = "Leading sportswear brand known for innovation and style.",
                            Name = "Nike",
                            Website = "https://www.nike.com"
                        },
                        new
                        {
                            Id = 2,
                            Country = "Germany",
                            Description = "Global brand offering a wide range of athletic footwear and apparel.",
                            Name = "Adidas",
                            Website = "https://www.adidas.com"
                        },
                        new
                        {
                            Id = 3,
                            Country = "Germany",
                            Description = "Renowned for its stylish and performance-oriented sportswear.",
                            Name = "Puma",
                            Website = "https://www.puma.com"
                        });
                });

            modelBuilder.Entity("eCommerce_backend.Models.Footwear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Footwear");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            Color = "White",
                            Description = "Classic Nike Air Max 90 in white.",
                            ImageUrl = "https://example.com/nike-airmax90-white.jpg",
                            Name = "Air Max 90",
                            Price = 129.99m,
                            Size = "42",
                            Stock = 10
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            Color = "Black",
                            Description = "Adidas Ultraboost 22 for running and comfort.",
                            ImageUrl = "https://example.com/adidas-ultraboost22-black.jpg",
                            Name = "Ultraboost 22",
                            Price = 149.99m,
                            Size = "43",
                            Stock = 15
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 3,
                            Color = "Red",
                            Description = "Converse Chuck Taylor All Star classic sneakers.",
                            ImageUrl = "https://example.com/converse-chucktaylor-red.jpg",
                            Name = "Chuck Taylor All Star",
                            Price = 69.99m,
                            Size = "41",
                            Stock = 20
                        });
                });

            modelBuilder.Entity("eCommerce_backend.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("eCommerce_backend.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("FootwearId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "FootwearId");

                    b.HasIndex("FootwearId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("eCommerce_backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Footwear", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Brand", "Brand")
                        .WithMany("Footwears")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("eCommerce_backend.Models.OrderItem", b =>
                {
                    b.HasOne("eCommerce_backend.Models.Footwear", "Footwear")
                        .WithMany("OrderItems")
                        .HasForeignKey("FootwearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eCommerce_backend.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Footwear");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Brand", b =>
                {
                    b.Navigation("Footwears");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Footwear", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("eCommerce_backend.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
